/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e00000000000000000000000000000000815250600090816200004a9190620003ae565b506040518060400160405280600381526020017f4d4854000000000000000000000000000000000000000000000000000000000081525060019081620000919190620003ae565b50620f4240600255348015620000a657600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000495565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b657607f821691505b602082108103620001cc57620001cb6200016e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001f7565b620002428683620001f7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200028f6200028962000283846200025a565b62000264565b6200025a565b9050919050565b6000819050919050565b620002ab836200026e565b620002c3620002ba8262000296565b84845462000204565b825550505050565b600090565b620002da620002cb565b620002e7818484620002a0565b505050565b5b818110156200030f5762000303600082620002d0565b600181019050620002ed565b5050565b601f8211156200035e576200032881620001d2565b6200033384620001e7565b8101602085101562000343578190505b6200035b6200035285620001e7565b830182620002ec565b50505b505050565b600082821c905092915050565b6000620003836000198460080262000363565b1980831691505092915050565b60006200039e838362000370565b9150826002028217905092915050565b620003b98262000134565b67ffffffffffffffff811115620003d557620003d46200013f565b5b620003e182546200019d565b620003ee82828562000313565b600060209050601f83116001811462000426576000841562000411578287015190505b6200041d858262000390565b8655506200048d565b601f1984166200043686620001d2565b60005b82811015620004605784890151825560018201915060208501945060208101905062000439565b868310156200048057848901516200047c601f89168262000370565b8355505b6001600288020188555050505b505050505050565b610aa180620004a56000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd1461008557806370a08231146100a35780638da5cb5b146100d357806395d89b41146100f1578063a9059cbb1461010f575b600080fd5b61006f61012b565b60405161007c91906106ec565b60405180910390f35b61008d6101b9565b60405161009a9190610727565b60405180910390f35b6100bd60048036038101906100b891906107a5565b6101bf565b6040516100ca9190610727565b60405180910390f35b6100db610286565b6040516100e891906107e1565b60405180910390f35b6100f96102ac565b60405161010691906106ec565b60405180910390f35b61012960048036038101906101249190610828565b61033a565b005b6000805461013890610897565b80601f016020809104026020016040519081016040528092919081815260200182805461016490610897565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081565b60025481565b600061023f6040518060400160405280600d81526020017f62616c616e636573202d2d3e2000000000000000000000000000000000000000815250600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104f5565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600180546102b990610897565b80601f01602080910402602001604051908101604052809291908181526020018280546102e590610897565b80156103325780601f1061030757610100808354040283529160200191610332565b820191906000526020600020905b81548152906001019060200180831161031557829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b390610914565b60405180910390fd5b6103e0604051806060016040528060248152602001610a4860249139338484610591565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461042f9190610963565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104859190610997565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104e99190610727565b60405180910390a35050565b61058d828260405160240161050b9291906109cb565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610633565b5050565b61062d848484846040516024016105ab94939291906109fb565b6040516020818303038152906040527f8ef3f399000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610633565b50505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561069657808201518184015260208101905061067b565b60008484015250505050565b6000601f19601f8301169050919050565b60006106be8261065c565b6106c88185610667565b93506106d8818560208601610678565b6106e1816106a2565b840191505092915050565b6000602082019050818103600083015261070681846106b3565b905092915050565b6000819050919050565b6107218161070e565b82525050565b600060208201905061073c6000830184610718565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077282610747565b9050919050565b61078281610767565b811461078d57600080fd5b50565b60008135905061079f81610779565b92915050565b6000602082840312156107bb576107ba610742565b5b60006107c984828501610790565b91505092915050565b6107db81610767565b82525050565b60006020820190506107f660008301846107d2565b92915050565b6108058161070e565b811461081057600080fd5b50565b600081359050610822816107fc565b92915050565b6000806040838503121561083f5761083e610742565b5b600061084d85828601610790565b925050602061085e85828601610813565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806108af57607f821691505b6020821081036108c2576108c1610868565b5b50919050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b60006108fe601183610667565b9150610909826108c8565b602082019050919050565b6000602082019050818103600083015261092d816108f1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061096e8261070e565b91506109798361070e565b925082820390508181111561099157610990610934565b5b92915050565b60006109a28261070e565b91506109ad8361070e565b92508282019050808211156109c5576109c4610934565b5b92915050565b600060408201905081810360008301526109e581856106b3565b90506109f46020830184610718565b9392505050565b60006080820190508181036000830152610a1581876106b3565b9050610a2460208301866107d2565b610a3160408301856107d2565b610a3e6060830184610718565b9594505050505056fe5472616e7366657272696e672066726f6d20257320746f20257320257320746f6b656e73a2646970667358221220064d0702b9144f6b8db976e21892b9b93f5a15401f431d8404b6ff7ca5fed94b64736f6c63430008120033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
