/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MonitoringInterface extends utils.Interface {
  functions: {
    "getTotalCapByYear(address,uint256)": FunctionFragment;
    "insertData(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getTotalCapByYear" | "insertData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTotalCapByYear",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "insertData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTotalCapByYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "insertData", data: BytesLike): Result;

  events: {
    "DataInserted(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataInserted"): EventFragment;
}

export interface DataInsertedEventObject {
  companyId: string;
  capAmount: BigNumber;
  reportingYear: BigNumber;
}
export type DataInsertedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DataInsertedEventObject
>;

export type DataInsertedEventFilter = TypedEventFilter<DataInsertedEvent>;

export interface Monitoring extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MonitoringInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTotalCapByYear(
      _companyId: PromiseOrValue<string>,
      _year: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    insertData(
      _companyId: PromiseOrValue<string>,
      _capAmount: PromiseOrValue<BigNumberish>,
      _reportingYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTotalCapByYear(
    _companyId: PromiseOrValue<string>,
    _year: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  insertData(
    _companyId: PromiseOrValue<string>,
    _capAmount: PromiseOrValue<BigNumberish>,
    _reportingYear: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTotalCapByYear(
      _companyId: PromiseOrValue<string>,
      _year: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insertData(
      _companyId: PromiseOrValue<string>,
      _capAmount: PromiseOrValue<BigNumberish>,
      _reportingYear: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DataInserted(address,uint256,uint256)"(
      companyId?: PromiseOrValue<string> | null,
      capAmount?: PromiseOrValue<BigNumberish> | null,
      reportingYear?: PromiseOrValue<BigNumberish> | null
    ): DataInsertedEventFilter;
    DataInserted(
      companyId?: PromiseOrValue<string> | null,
      capAmount?: PromiseOrValue<BigNumberish> | null,
      reportingYear?: PromiseOrValue<BigNumberish> | null
    ): DataInsertedEventFilter;
  };

  estimateGas: {
    getTotalCapByYear(
      _companyId: PromiseOrValue<string>,
      _year: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insertData(
      _companyId: PromiseOrValue<string>,
      _capAmount: PromiseOrValue<BigNumberish>,
      _reportingYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTotalCapByYear(
      _companyId: PromiseOrValue<string>,
      _year: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insertData(
      _companyId: PromiseOrValue<string>,
      _capAmount: PromiseOrValue<BigNumberish>,
      _reportingYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
