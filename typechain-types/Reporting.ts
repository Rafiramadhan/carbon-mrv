/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ReportingInterface extends utils.Interface {
  functions: {
    "addSignature()": FunctionFragment;
    "areSignaturesComplete()": FunctionFragment;
    "authority()": FunctionFragment;
    "docHashes(address)": FunctionFragment;
    "finishTransaction()": FunctionFragment;
    "initialize(uint256,string,uint256)": FunctionFragment;
    "isVerifierSelected()": FunctionFragment;
    "mismatch(address)": FunctionFragment;
    "organization()": FunctionFragment;
    "rejectTransaction(string)": FunctionFragment;
    "rejectionMessage()": FunctionFragment;
    "reportedTokens(address)": FunctionFragment;
    "selectedVerifiers(address)": FunctionFragment;
    "signatures(address)": FunctionFragment;
    "transactionActive()": FunctionFragment;
    "transactionFinished()": FunctionFragment;
    "transactionRejected()": FunctionFragment;
    "verifierAddresses(uint256)": FunctionFragment;
    "verifiers(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSignature"
      | "areSignaturesComplete"
      | "authority"
      | "docHashes"
      | "finishTransaction"
      | "initialize"
      | "isVerifierSelected"
      | "mismatch"
      | "organization"
      | "rejectTransaction"
      | "rejectionMessage"
      | "reportedTokens"
      | "selectedVerifiers"
      | "signatures"
      | "transactionActive"
      | "transactionFinished"
      | "transactionRejected"
      | "verifierAddresses"
      | "verifiers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "areSignaturesComplete",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "docHashes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finishTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifierSelected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mismatch",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "organization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectTransaction",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectionMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "selectedVerifiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signatures",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionRejected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifierAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areSignaturesComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "docHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVerifierSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mismatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "organization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectionMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectedVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signatures", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifierAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;

  events: {
    "ConsoleLogaddress(address[])": EventFragment;
    "ConsoleLogarray(string[])": EventFragment;
    "ConsoleLogstring(string)": EventFragment;
    "ConsoleLoguint256(uint256[])": EventFragment;
    "SignatureAdded(address)": EventFragment;
    "TransactionFinished()": EventFragment;
    "TransactionRejected(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsoleLogaddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsoleLogarray"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsoleLogstring"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsoleLoguint256"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionRejected"): EventFragment;
}

export interface ConsoleLogaddressEventObject {
  message: string[];
}
export type ConsoleLogaddressEvent = TypedEvent<
  [string[]],
  ConsoleLogaddressEventObject
>;

export type ConsoleLogaddressEventFilter =
  TypedEventFilter<ConsoleLogaddressEvent>;

export interface ConsoleLogarrayEventObject {
  message: string[];
}
export type ConsoleLogarrayEvent = TypedEvent<
  [string[]],
  ConsoleLogarrayEventObject
>;

export type ConsoleLogarrayEventFilter = TypedEventFilter<ConsoleLogarrayEvent>;

export interface ConsoleLogstringEventObject {
  message: string;
}
export type ConsoleLogstringEvent = TypedEvent<
  [string],
  ConsoleLogstringEventObject
>;

export type ConsoleLogstringEventFilter =
  TypedEventFilter<ConsoleLogstringEvent>;

export interface ConsoleLoguint256EventObject {
  message: BigNumber[];
}
export type ConsoleLoguint256Event = TypedEvent<
  [BigNumber[]],
  ConsoleLoguint256EventObject
>;

export type ConsoleLoguint256EventFilter =
  TypedEventFilter<ConsoleLoguint256Event>;

export interface SignatureAddedEventObject {
  signer: string;
}
export type SignatureAddedEvent = TypedEvent<
  [string],
  SignatureAddedEventObject
>;

export type SignatureAddedEventFilter = TypedEventFilter<SignatureAddedEvent>;

export interface TransactionFinishedEventObject {}
export type TransactionFinishedEvent = TypedEvent<
  [],
  TransactionFinishedEventObject
>;

export type TransactionFinishedEventFilter =
  TypedEventFilter<TransactionFinishedEvent>;

export interface TransactionRejectedEventObject {
  message: string;
}
export type TransactionRejectedEvent = TypedEvent<
  [string],
  TransactionRejectedEventObject
>;

export type TransactionRejectedEventFilter =
  TypedEventFilter<TransactionRejectedEvent>;

export interface Reporting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReportingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSignature(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    areSignaturesComplete(overrides?: CallOverrides): Promise<[boolean]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    docHashes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finishTransaction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _reportedToken: PromiseOrValue<BigNumberish>,
      _docHash: PromiseOrValue<string>,
      _storedUsage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isVerifierSelected(
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber, string]>;

    mismatch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    organization(overrides?: CallOverrides): Promise<[string]>;

    rejectTransaction(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectionMessage(overrides?: CallOverrides): Promise<[string]>;

    reportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    selectedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signatures(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transactionActive(overrides?: CallOverrides): Promise<[boolean]>;

    transactionFinished(overrides?: CallOverrides): Promise<[boolean]>;

    transactionRejected(overrides?: CallOverrides): Promise<[boolean]>;

    verifierAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { verifierAddress: string; verifierEmail: string }
    >;
  };

  addSignature(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  areSignaturesComplete(overrides?: CallOverrides): Promise<boolean>;

  authority(overrides?: CallOverrides): Promise<string>;

  docHashes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  finishTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _reportedToken: PromiseOrValue<BigNumberish>,
    _docHash: PromiseOrValue<string>,
    _storedUsage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isVerifierSelected(
    overrides?: CallOverrides
  ): Promise<[boolean, string, BigNumber, string]>;

  mismatch(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  organization(overrides?: CallOverrides): Promise<string>;

  rejectTransaction(
    message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectionMessage(overrides?: CallOverrides): Promise<string>;

  reportedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  selectedVerifiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signatures(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transactionActive(overrides?: CallOverrides): Promise<boolean>;

  transactionFinished(overrides?: CallOverrides): Promise<boolean>;

  transactionRejected(overrides?: CallOverrides): Promise<boolean>;

  verifierAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifiers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { verifierAddress: string; verifierEmail: string }
  >;

  callStatic: {
    addSignature(overrides?: CallOverrides): Promise<void>;

    areSignaturesComplete(overrides?: CallOverrides): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    docHashes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    finishTransaction(overrides?: CallOverrides): Promise<void>;

    initialize(
      _reportedToken: PromiseOrValue<BigNumberish>,
      _docHash: PromiseOrValue<string>,
      _storedUsage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    isVerifierSelected(
      overrides?: CallOverrides
    ): Promise<[boolean, string, BigNumber, string]>;

    mismatch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    organization(overrides?: CallOverrides): Promise<string>;

    rejectTransaction(
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectionMessage(overrides?: CallOverrides): Promise<string>;

    reportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selectedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signatures(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transactionActive(overrides?: CallOverrides): Promise<boolean>;

    transactionFinished(overrides?: CallOverrides): Promise<boolean>;

    transactionRejected(overrides?: CallOverrides): Promise<boolean>;

    verifierAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { verifierAddress: string; verifierEmail: string }
    >;
  };

  filters: {
    "ConsoleLogaddress(address[])"(
      message?: null
    ): ConsoleLogaddressEventFilter;
    ConsoleLogaddress(message?: null): ConsoleLogaddressEventFilter;

    "ConsoleLogarray(string[])"(message?: null): ConsoleLogarrayEventFilter;
    ConsoleLogarray(message?: null): ConsoleLogarrayEventFilter;

    "ConsoleLogstring(string)"(message?: null): ConsoleLogstringEventFilter;
    ConsoleLogstring(message?: null): ConsoleLogstringEventFilter;

    "ConsoleLoguint256(uint256[])"(
      message?: null
    ): ConsoleLoguint256EventFilter;
    ConsoleLoguint256(message?: null): ConsoleLoguint256EventFilter;

    "SignatureAdded(address)"(
      signer?: PromiseOrValue<string> | null
    ): SignatureAddedEventFilter;
    SignatureAdded(
      signer?: PromiseOrValue<string> | null
    ): SignatureAddedEventFilter;

    "TransactionFinished()"(): TransactionFinishedEventFilter;
    TransactionFinished(): TransactionFinishedEventFilter;

    "TransactionRejected(string)"(
      message?: null
    ): TransactionRejectedEventFilter;
    TransactionRejected(message?: null): TransactionRejectedEventFilter;
  };

  estimateGas: {
    addSignature(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    areSignaturesComplete(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    docHashes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishTransaction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _reportedToken: PromiseOrValue<BigNumberish>,
      _docHash: PromiseOrValue<string>,
      _storedUsage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isVerifierSelected(overrides?: CallOverrides): Promise<BigNumber>;

    mismatch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    organization(overrides?: CallOverrides): Promise<BigNumber>;

    rejectTransaction(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectionMessage(overrides?: CallOverrides): Promise<BigNumber>;

    reportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selectedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signatures(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionActive(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFinished(overrides?: CallOverrides): Promise<BigNumber>;

    transactionRejected(overrides?: CallOverrides): Promise<BigNumber>;

    verifierAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSignature(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    areSignaturesComplete(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    docHashes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishTransaction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _reportedToken: PromiseOrValue<BigNumberish>,
      _docHash: PromiseOrValue<string>,
      _storedUsage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isVerifierSelected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mismatch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    organization(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectTransaction(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectionMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selectedVerifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signatures(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionFinished(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionRejected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifierAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifiers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
